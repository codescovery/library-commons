name: .Net Publish Package

on:
  create:
    branches:
      - release/**
      - main
      - development
  push:
    paths-ignore:
      - 'docs/**'
      - 'README.md'
      - 'LICENSE'

jobs:
  build:
    env:
      BUILD_CONFIG: 'Release'
      SOLUTION_PATH: 'src/Codescovery.Library.Commons.sln'
      PACKAGE_PROJECT_PATH: 'src/Package/Codescovery.Library.Commons/Codescovery.Library.Commons.csproj'
      TEST_PROJECT_PATH: 'src/Tests/Codescovery.Library.Commons.Test/Codescovery.Library.Commons.Test.csproj'
      NUGET_SOURCE: 'https://nuget.pkg.github.com/codescovery/index.json'
    strategy:
      matrix:
        dotnet: [ '7.0.x' ]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Get Build Version
      run: |
        Write-Host $Env:GITHUB_REF
        $version =  $Env:GITHUB_REF.replace('refs/heads/release/','')
        echo "BUILD_VERSION=$version" >> $Env:GITHUB_ENV
        Write-Host $Env:BUILD_VERSION
      shell: pwsh

    #- name: Restore dependencies
    #  run: dotnet restore ${{env.SOLUTION_PATH}}

    #- name: Setup .NET
    #  uses: actions/setup-dotnet@v3
    #  with:
    #    dotnet-version: ${{ matrix.dotnet }}

    #- name: Build
    #  run: dotnet build ${{env.PACKAGE_PROJECT_PATH}} --configuration ${{env.BUILD_CONFIG}} -p:Version=${{env.BUILD_VERSION}} --no-restore
      
    #- name: Pack
    #  run: dotnet pack ${{env.PACKAGE_PROJECT_PATH}} --configuration ${{env.BUILD_CONFIG}} --no-build --no-restore -o ${{env.DOTNET_ROOT}}/artifact /p:Version=${{env.BUILD_VERSION}}
      
    #- name: List dotnet pack output
    #  run: |
    #    cd $Env:DOTNET_ROOT
    #    cd ./artifact
    #    ls
    #  shell: pwsh
      
    #- name: Run tests
    #  run: dotnet test ${{env.TEST_PROJECT_PATH}} /p:Configuration=${{env.BUILD_CONFIG}} --no-restore --verbosity normal
      
    #- name: Publish
    #  if: startsWith(github.ref, 'refs/heads/release')
    #  run: dotnet nuget push ${{env.DOTNET_ROOT}}/artifact/*.nupkg --source ${{env.NUGET_SOURCE}} --api-key ${{secrets.NUGET_API_KEY_GITHUB}}
    - name: Create Release Tag
      if: startsWith(github.ref, 'refs/heads/release')
      uses: actions/github-script@v6
      env:
            RELEASE_VERSION_PREFIX: 'v'
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
         
                console.log("Initializing script");
                console.log(`BUILD_VERSION: ${process.env.BUILD_VERSION}`)
                console.log(`GITHUB_REF: ${process.env.GITHUB_REF}`)
                const version = process.env.BUILD_VERSION;
                const tagRefPrefix = 'refs/tags/';
                const versionPrefix = process.env.RELEASE_VERSION_PREFIX;
                const releaseTag = `${versionPrefix}${version}`;
                const releaseTagRef = `${tagRefPrefix}${releaseTag}`;
                console.log(`Sha: ${context.sha}` );
                async function createReleaseTag(){
                    try{
                        const tagResponse = await github.rest.git.createTag({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            tag: releaseTag,
                            message: `Tagging commit ${sha}`,
                            object: context.sha,
                            sha: context.sha,
                            type: 'commit'
                        });
                        #await github.rest.git.createRef({
                        #  owner: context.repo.owner,
                        #  repo: context.repo.repo,
                        #  ref: releaseTagRef,
                        #  sha: context.sha
                        #});
                        return tagResponse;
                    } catch (e) {
                        const errorMessage = `Error while creating release ${releaseTagRef} tag. Error: ${e}`;
                        console.error(errorMessage);
                        core.setFailed(errorMessage)
                    }
                }
                await createReleaseTag();

    - name: Create Latest Tag
      if: startsWith(github.ref, 'refs/heads/development')
      uses: actions/github-script@v6
      env:
        LATEST_TAG_NAME: 'latest'
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}          
        script: |
            
              console.log("Initializing script");
              const tagPrefix = 'refs/tags/';
              const latestTagName = process.env.LATEST_TAG_NAME;
              const latestTagRef =`${tagRefPrefix}${latestTagName}`;
              async function deleteLatestTagIfExists(){
                const tagResponse = await github.rest.git.getRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: latestTagRef
                  });
                if(tagResponse.status !== 200) return;
                await github.rest.git.deleteRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: latestTagRef
                });
                  
              }
              async function createLatestTag(){
                try {
                    await deleteLatestTagIfExists();
                    const tagResponse = await github.rest.git.createRef({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        ref: latestTagRef,
                        sha: context.sha
                    });
                    return tagResponse;
                } catch (e) {
                    const errorMessage =`Error while creating latest ${latestTagRef} tag. Error: ${e}`;
                    console.error(errorMessage);
                    core.setFailed(errorMessage)
                }
              }
              
              await createLatestTag();
